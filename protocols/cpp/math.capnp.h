// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: protocols\math.capnp

#ifndef CAPNP_INCLUDED_f53f070a70eb22d7_
#define CAPNP_INCLUDED_f53f070a70eb22d7_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c8539200e253d3a6);
CAPNP_DECLARE_SCHEMA(bb191a88d9d18851);
CAPNP_DECLARE_SCHEMA(9ed6ddf6d9589c28);
CAPNP_DECLARE_SCHEMA(ddc6db8d59766eee);
CAPNP_DECLARE_SCHEMA(f98dfb1425c86eba);

}  // namespace schemas
}  // namespace capnp


struct Vector3 {
  Vector3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8539200e253d3a6, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Point3 {
  Point3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb191a88d9d18851, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Matrix4 {
  Matrix4() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ed6ddf6d9589c28, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Transform {
  Transform() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Transform;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ddc6db8d59766eee, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Transform::Transform {
  Transform() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    TRANSLATE,
    ROTATION,
    SCALE,
    MATRIX,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f98dfb1425c86eba, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Vector3::Reader {
public:
  typedef Vector3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vector3::Builder {
public:
  typedef Vector3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vector3::Pipeline {
public:
  typedef Vector3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Point3::Reader {
public:
  typedef Point3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point3::Builder {
public:
  typedef Point3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point3::Pipeline {
public:
  typedef Point3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Matrix4::Reader {
public:
  typedef Matrix4 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getM11() const;

  inline float getM21() const;

  inline float getM31() const;

  inline float getM41() const;

  inline float getM12() const;

  inline float getM22() const;

  inline float getM32() const;

  inline float getM42() const;

  inline float getM13() const;

  inline float getM23() const;

  inline float getM33() const;

  inline float getM43() const;

  inline float getM14() const;

  inline float getM24() const;

  inline float getM34() const;

  inline float getM44() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Matrix4::Builder {
public:
  typedef Matrix4 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getM11();
  inline void setM11(float value);

  inline float getM21();
  inline void setM21(float value);

  inline float getM31();
  inline void setM31(float value);

  inline float getM41();
  inline void setM41(float value);

  inline float getM12();
  inline void setM12(float value);

  inline float getM22();
  inline void setM22(float value);

  inline float getM32();
  inline void setM32(float value);

  inline float getM42();
  inline void setM42(float value);

  inline float getM13();
  inline void setM13(float value);

  inline float getM23();
  inline void setM23(float value);

  inline float getM33();
  inline void setM33(float value);

  inline float getM43();
  inline void setM43(float value);

  inline float getM14();
  inline void setM14(float value);

  inline float getM24();
  inline void setM24(float value);

  inline float getM34();
  inline void setM34(float value);

  inline float getM44();
  inline void setM44(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Matrix4::Pipeline {
public:
  typedef Matrix4 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Transform::Reader {
public:
  typedef Transform Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Transform::Reader getTransform() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Transform::Builder {
public:
  typedef Transform Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Transform::Builder getTransform();
  inline Transform::Builder initTransform();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Transform::Pipeline {
public:
  typedef Transform Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Transform::Pipeline getTransform();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Transform::Transform::Reader {
public:
  typedef Transform Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isTranslate() const;
  inline bool hasTranslate() const;
  inline  ::Vector3::Reader getTranslate() const;

  inline bool isRotation() const;
  inline bool hasRotation() const;
  inline  ::Vector3::Reader getRotation() const;

  inline bool isScale() const;
  inline bool hasScale() const;
  inline  ::Vector3::Reader getScale() const;

  inline bool isMatrix() const;
  inline bool hasMatrix() const;
  inline  ::Matrix4::Reader getMatrix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Transform::Transform::Builder {
public:
  typedef Transform Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isTranslate();
  inline bool hasTranslate();
  inline  ::Vector3::Builder getTranslate();
  inline void setTranslate( ::Vector3::Reader value);
  inline  ::Vector3::Builder initTranslate();
  inline void adoptTranslate(::capnp::Orphan< ::Vector3>&& value);
  inline ::capnp::Orphan< ::Vector3> disownTranslate();

  inline bool isRotation();
  inline bool hasRotation();
  inline  ::Vector3::Builder getRotation();
  inline void setRotation( ::Vector3::Reader value);
  inline  ::Vector3::Builder initRotation();
  inline void adoptRotation(::capnp::Orphan< ::Vector3>&& value);
  inline ::capnp::Orphan< ::Vector3> disownRotation();

  inline bool isScale();
  inline bool hasScale();
  inline  ::Vector3::Builder getScale();
  inline void setScale( ::Vector3::Reader value);
  inline  ::Vector3::Builder initScale();
  inline void adoptScale(::capnp::Orphan< ::Vector3>&& value);
  inline ::capnp::Orphan< ::Vector3> disownScale();

  inline bool isMatrix();
  inline bool hasMatrix();
  inline  ::Matrix4::Builder getMatrix();
  inline void setMatrix( ::Matrix4::Reader value);
  inline  ::Matrix4::Builder initMatrix();
  inline void adoptMatrix(::capnp::Orphan< ::Matrix4>&& value);
  inline ::capnp::Orphan< ::Matrix4> disownMatrix();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Transform::Transform::Pipeline {
public:
  typedef Transform Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float Vector3::Reader::getX() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Vector3::Builder::getX() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Vector3::Builder::setX(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float Vector3::Reader::getY() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Vector3::Builder::getY() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Vector3::Builder::setY(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float Vector3::Reader::getZ() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Vector3::Builder::getZ() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Vector3::Builder::setZ(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float Point3::Reader::getX() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getX() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setX(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float Point3::Reader::getY() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getY() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setY(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float Point3::Reader::getZ() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getZ() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setZ(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM11() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM11() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM11(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM21() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM21() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM21(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM31() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM31() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM31(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM41() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM41() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM41(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM12() const {
  return _reader.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM12() {
  return _builder.getDataField<float>(
      4 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM12(float value) {
  _builder.setDataField<float>(
      4 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM22() const {
  return _reader.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM22() {
  return _builder.getDataField<float>(
      5 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM22(float value) {
  _builder.setDataField<float>(
      5 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM32() const {
  return _reader.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM32() {
  return _builder.getDataField<float>(
      6 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM32(float value) {
  _builder.setDataField<float>(
      6 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM42() const {
  return _reader.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM42() {
  return _builder.getDataField<float>(
      7 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM42(float value) {
  _builder.setDataField<float>(
      7 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM13() const {
  return _reader.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM13() {
  return _builder.getDataField<float>(
      8 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM13(float value) {
  _builder.setDataField<float>(
      8 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM23() const {
  return _reader.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM23() {
  return _builder.getDataField<float>(
      9 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM23(float value) {
  _builder.setDataField<float>(
      9 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM33() const {
  return _reader.getDataField<float>(
      10 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM33() {
  return _builder.getDataField<float>(
      10 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM33(float value) {
  _builder.setDataField<float>(
      10 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM43() const {
  return _reader.getDataField<float>(
      11 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM43() {
  return _builder.getDataField<float>(
      11 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM43(float value) {
  _builder.setDataField<float>(
      11 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM14() const {
  return _reader.getDataField<float>(
      12 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM14() {
  return _builder.getDataField<float>(
      12 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM14(float value) {
  _builder.setDataField<float>(
      12 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM24() const {
  return _reader.getDataField<float>(
      13 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM24() {
  return _builder.getDataField<float>(
      13 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM24(float value) {
  _builder.setDataField<float>(
      13 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM34() const {
  return _reader.getDataField<float>(
      14 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM34() {
  return _builder.getDataField<float>(
      14 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM34(float value) {
  _builder.setDataField<float>(
      14 * ::capnp::ELEMENTS, value);
}

inline float Matrix4::Reader::getM44() const {
  return _reader.getDataField<float>(
      15 * ::capnp::ELEMENTS);
}

inline float Matrix4::Builder::getM44() {
  return _builder.getDataField<float>(
      15 * ::capnp::ELEMENTS);
}
inline void Matrix4::Builder::setM44(float value) {
  _builder.setDataField<float>(
      15 * ::capnp::ELEMENTS, value);
}

inline Transform::Transform::Reader Transform::Reader::getTransform() const {
  return Transform::Transform::Reader(_reader);
}
inline Transform::Transform::Builder Transform::Builder::getTransform() {
  return Transform::Transform::Builder(_builder);
}
#if !CAPNP_LITE
inline Transform::Transform::Pipeline Transform::Pipeline::getTransform() {
  return Transform::Transform::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Transform::Transform::Builder Transform::Builder::initTransform() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return Transform::Transform::Builder(_builder);
}
inline  ::Transform::Transform::Which Transform::Transform::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::Transform::Transform::Which Transform::Transform::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Transform::Transform::Reader::isTranslate() const {
  return which() == Transform::Transform::TRANSLATE;
}
inline bool Transform::Transform::Builder::isTranslate() {
  return which() == Transform::Transform::TRANSLATE;
}
inline bool Transform::Transform::Reader::hasTranslate() const {
  if (which() != Transform::Transform::TRANSLATE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Transform::Transform::Builder::hasTranslate() {
  if (which() != Transform::Transform::TRANSLATE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Vector3::Reader Transform::Transform::Reader::getTranslate() const {
  KJ_IREQUIRE(which() == Transform::Transform::TRANSLATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Vector3::Builder Transform::Transform::Builder::getTranslate() {
  KJ_IREQUIRE(which() == Transform::Transform::TRANSLATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::setTranslate( ::Vector3::Reader value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::TRANSLATE);
  ::capnp::_::PointerHelpers< ::Vector3>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Vector3::Builder Transform::Transform::Builder::initTranslate() {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::TRANSLATE);
  return ::capnp::_::PointerHelpers< ::Vector3>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::adoptTranslate(
    ::capnp::Orphan< ::Vector3>&& value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::TRANSLATE);
  ::capnp::_::PointerHelpers< ::Vector3>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vector3> Transform::Transform::Builder::disownTranslate() {
  KJ_IREQUIRE(which() == Transform::Transform::TRANSLATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Transform::Transform::Reader::isRotation() const {
  return which() == Transform::Transform::ROTATION;
}
inline bool Transform::Transform::Builder::isRotation() {
  return which() == Transform::Transform::ROTATION;
}
inline bool Transform::Transform::Reader::hasRotation() const {
  if (which() != Transform::Transform::ROTATION) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Transform::Transform::Builder::hasRotation() {
  if (which() != Transform::Transform::ROTATION) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Vector3::Reader Transform::Transform::Reader::getRotation() const {
  KJ_IREQUIRE(which() == Transform::Transform::ROTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Vector3::Builder Transform::Transform::Builder::getRotation() {
  KJ_IREQUIRE(which() == Transform::Transform::ROTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::setRotation( ::Vector3::Reader value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::ROTATION);
  ::capnp::_::PointerHelpers< ::Vector3>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Vector3::Builder Transform::Transform::Builder::initRotation() {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::ROTATION);
  return ::capnp::_::PointerHelpers< ::Vector3>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::adoptRotation(
    ::capnp::Orphan< ::Vector3>&& value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::ROTATION);
  ::capnp::_::PointerHelpers< ::Vector3>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vector3> Transform::Transform::Builder::disownRotation() {
  KJ_IREQUIRE(which() == Transform::Transform::ROTATION,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Transform::Transform::Reader::isScale() const {
  return which() == Transform::Transform::SCALE;
}
inline bool Transform::Transform::Builder::isScale() {
  return which() == Transform::Transform::SCALE;
}
inline bool Transform::Transform::Reader::hasScale() const {
  if (which() != Transform::Transform::SCALE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Transform::Transform::Builder::hasScale() {
  if (which() != Transform::Transform::SCALE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Vector3::Reader Transform::Transform::Reader::getScale() const {
  KJ_IREQUIRE(which() == Transform::Transform::SCALE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Vector3::Builder Transform::Transform::Builder::getScale() {
  KJ_IREQUIRE(which() == Transform::Transform::SCALE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::setScale( ::Vector3::Reader value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::SCALE);
  ::capnp::_::PointerHelpers< ::Vector3>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Vector3::Builder Transform::Transform::Builder::initScale() {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::SCALE);
  return ::capnp::_::PointerHelpers< ::Vector3>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::adoptScale(
    ::capnp::Orphan< ::Vector3>&& value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::SCALE);
  ::capnp::_::PointerHelpers< ::Vector3>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vector3> Transform::Transform::Builder::disownScale() {
  KJ_IREQUIRE(which() == Transform::Transform::SCALE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vector3>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Transform::Transform::Reader::isMatrix() const {
  return which() == Transform::Transform::MATRIX;
}
inline bool Transform::Transform::Builder::isMatrix() {
  return which() == Transform::Transform::MATRIX;
}
inline bool Transform::Transform::Reader::hasMatrix() const {
  if (which() != Transform::Transform::MATRIX) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Transform::Transform::Builder::hasMatrix() {
  if (which() != Transform::Transform::MATRIX) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Matrix4::Reader Transform::Transform::Reader::getMatrix() const {
  KJ_IREQUIRE(which() == Transform::Transform::MATRIX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Matrix4>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Matrix4::Builder Transform::Transform::Builder::getMatrix() {
  KJ_IREQUIRE(which() == Transform::Transform::MATRIX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Matrix4>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::setMatrix( ::Matrix4::Reader value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::MATRIX);
  ::capnp::_::PointerHelpers< ::Matrix4>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Matrix4::Builder Transform::Transform::Builder::initMatrix() {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::MATRIX);
  return ::capnp::_::PointerHelpers< ::Matrix4>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Transform::Transform::Builder::adoptMatrix(
    ::capnp::Orphan< ::Matrix4>&& value) {
  _builder.setDataField<Transform::Transform::Which>(
      0 * ::capnp::ELEMENTS, Transform::Transform::MATRIX);
  ::capnp::_::PointerHelpers< ::Matrix4>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Matrix4> Transform::Transform::Builder::disownMatrix() {
  KJ_IREQUIRE(which() == Transform::Transform::MATRIX,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Matrix4>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_f53f070a70eb22d7_
