// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: protocols\utils.capnp

#ifndef CAPNP_INCLUDED_a32f1c68bcd121ee_
#define CAPNP_INCLUDED_a32f1c68bcd121ee_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b17d86024218444d);

}  // namespace schemas
}  // namespace capnp


template <typename Type = ::capnp::AnyPointer>
struct Option {
  Option() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    SOME,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b17d86024218444d, 1, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, Type>::brand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename Type>
class Option<Type>::Reader {
public:
  typedef Option Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isSome() const;
  inline bool hasSome() const;
  inline  ::capnp::ReaderFor<Type> getSome() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Type>
class Option<Type>::Builder {
public:
  typedef Option Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isSome();
  inline bool hasSome();
  inline  ::capnp::BuilderFor<Type> getSome();
  inline void setSome( ::capnp::ReaderFor<Type> value);
  inline  ::capnp::BuilderFor<Type> initSome();
  inline  ::capnp::BuilderFor<Type> initSome(unsigned int size);
  inline void adoptSome(::capnp::Orphan<Type>&& value);
  inline ::capnp::Orphan<Type> disownSome();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Type>
class Option<Type>::Pipeline {
public:
  typedef Option Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename Type>
inline typename  ::Option<Type>::Which Option<Type>::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
template <typename Type>
inline typename  ::Option<Type>::Which Option<Type>::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

template <typename Type>
inline bool Option<Type>::Reader::isNone() const {
  return which() == Option<Type>::NONE;
}
template <typename Type>
inline bool Option<Type>::Builder::isNone() {
  return which() == Option<Type>::NONE;
}
template <typename Type>
inline  ::capnp::Void Option<Type>::Reader::getNone() const {
  KJ_IREQUIRE(which() == Option<Type>::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

template <typename Type>
inline  ::capnp::Void Option<Type>::Builder::getNone() {
  KJ_IREQUIRE(which() == Option<Type>::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
template <typename Type>
inline void Option<Type>::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Option<Type>::Which>(
      0 * ::capnp::ELEMENTS, Option<Type>::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

template <typename Type>
inline bool Option<Type>::Reader::isSome() const {
  return which() == Option<Type>::SOME;
}
template <typename Type>
inline bool Option<Type>::Builder::isSome() {
  return which() == Option<Type>::SOME;
}
template <typename Type>
inline bool Option<Type>::Reader::hasSome() const {
  if (which() != Option<Type>::SOME) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Type>
inline bool Option<Type>::Builder::hasSome() {
  if (which() != Option<Type>::SOME) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename Type>
inline  ::capnp::ReaderFor<Type> Option<Type>::Reader::getSome() const {
  KJ_IREQUIRE(which() == Option<Type>::SOME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<Type>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Type>
inline  ::capnp::BuilderFor<Type> Option<Type>::Builder::getSome() {
  KJ_IREQUIRE(which() == Option<Type>::SOME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<Type>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Type>
inline void Option<Type>::Builder::setSome( ::capnp::ReaderFor<Type> value) {
  _builder.setDataField<Option<Type>::Which>(
      0 * ::capnp::ELEMENTS, Option<Type>::SOME);
  ::capnp::_::PointerHelpers<Type>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename Type>
inline  ::capnp::BuilderFor<Type> Option<Type>::Builder::initSome() {
  _builder.setDataField<Option<Type>::Which>(
      0 * ::capnp::ELEMENTS, Option<Type>::SOME);
  return ::capnp::_::PointerHelpers<Type>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename Type>
inline  ::capnp::BuilderFor<Type> Option<Type>::Builder::initSome(unsigned int size) {
  _builder.setDataField<Option<Type>::Which>(
      0 * ::capnp::ELEMENTS, Option<Type>::SOME);
  return ::capnp::_::PointerHelpers<Type>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename Type>
inline void Option<Type>::Builder::adoptSome(
    ::capnp::Orphan<Type>&& value) {
  _builder.setDataField<Option<Type>::Which>(
      0 * ::capnp::ELEMENTS, Option<Type>::SOME);
  ::capnp::_::PointerHelpers<Type>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename Type>
inline ::capnp::Orphan<Type> Option<Type>::Builder::disownSome() {
  KJ_IREQUIRE(which() == Option<Type>::SOME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<Type>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// Option<Type>
#ifndef _MSC_VER
template <typename Type>
constexpr uint16_t Option<Type>::_capnpPrivate::dataWordSize;
template <typename Type>
constexpr uint16_t Option<Type>::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
template <typename Type>
constexpr ::capnp::Kind Option<Type>::_capnpPrivate::kind;
template <typename Type>
constexpr ::capnp::_::RawSchema const* Option<Type>::_capnpPrivate::schema;
template <typename Type>
constexpr ::capnp::_::RawBrandedSchema const* Option<Type>::_capnpPrivate::brand;
template <typename Type>
const ::capnp::_::RawBrandedSchema::Scope Option<Type>::_capnpPrivate::brandScopes[] = {
  { 0xb17d86024218444d, brandBindings + 0, 1, false},
};
template <typename Type>
const ::capnp::_::RawBrandedSchema::Binding Option<Type>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Type>(),
};
template <typename Type>
const ::capnp::_::RawBrandedSchema Option<Type>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b17d86024218444d, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE


#endif  // CAPNP_INCLUDED_a32f1c68bcd121ee_
