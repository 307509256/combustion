// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: protocols\utils.capnp

#ifndef CAPNP_INCLUDED_a32f1c68bcd121ee_
#define CAPNP_INCLUDED_a32f1c68bcd121ee_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b17d86024218444d);
CAPNP_DECLARE_SCHEMA(a18e1acd5ce2427c);

}  // namespace schemas
}  // namespace capnp


template <typename SomeType = ::capnp::AnyPointer>
struct Option {
  Option() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    SOME,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b17d86024218444d, 1, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, SomeType>::brand;
    #endif  // !CAPNP_LITE
  };
};

template <typename FirstType = ::capnp::AnyPointer, typename SecondType = ::capnp::AnyPointer>
struct Pair {
  Pair() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a18e1acd5ce2427c, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand = ::capnp::_::ChooseBrand<_capnpPrivate, FirstType, SecondType>::brand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename SomeType>
class Option<SomeType>::Reader {
public:
  typedef Option Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isSome() const;
  inline bool hasSome() const;
  inline  ::capnp::ReaderFor<SomeType> getSome() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename SomeType>
class Option<SomeType>::Builder {
public:
  typedef Option Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isSome();
  inline bool hasSome();
  inline  ::capnp::BuilderFor<SomeType> getSome();
  inline void setSome( ::capnp::ReaderFor<SomeType> value);
  inline  ::capnp::BuilderFor<SomeType> initSome();
  inline  ::capnp::BuilderFor<SomeType> initSome(unsigned int size);
  inline void adoptSome(::capnp::Orphan<SomeType>&& value);
  inline ::capnp::Orphan<SomeType> disownSome();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename SomeType>
class Option<SomeType>::Pipeline {
public:
  typedef Option Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename FirstType, typename SecondType>
class Pair<FirstType, SecondType>::Reader {
public:
  typedef Pair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasFirst() const;
  inline  ::capnp::ReaderFor<FirstType> getFirst() const;

  inline bool hasSecond() const;
  inline  ::capnp::ReaderFor<SecondType> getSecond() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename FirstType, typename SecondType>
class Pair<FirstType, SecondType>::Builder {
public:
  typedef Pair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFirst();
  inline  ::capnp::BuilderFor<FirstType> getFirst();
  inline void setFirst( ::capnp::ReaderFor<FirstType> value);
  inline  ::capnp::BuilderFor<FirstType> initFirst();
  inline  ::capnp::BuilderFor<FirstType> initFirst(unsigned int size);
  inline void adoptFirst(::capnp::Orphan<FirstType>&& value);
  inline ::capnp::Orphan<FirstType> disownFirst();

  inline bool hasSecond();
  inline  ::capnp::BuilderFor<SecondType> getSecond();
  inline void setSecond( ::capnp::ReaderFor<SecondType> value);
  inline  ::capnp::BuilderFor<SecondType> initSecond();
  inline  ::capnp::BuilderFor<SecondType> initSecond(unsigned int size);
  inline void adoptSecond(::capnp::Orphan<SecondType>&& value);
  inline ::capnp::Orphan<SecondType> disownSecond();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename FirstType, typename SecondType>
class Pair<FirstType, SecondType>::Pipeline {
public:
  typedef Pair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<FirstType> getFirst();
  inline  ::capnp::PipelineFor<SecondType> getSecond();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename SomeType>
inline typename  ::Option<SomeType>::Which Option<SomeType>::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
template <typename SomeType>
inline typename  ::Option<SomeType>::Which Option<SomeType>::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

template <typename SomeType>
inline bool Option<SomeType>::Reader::isNone() const {
  return which() == Option<SomeType>::NONE;
}
template <typename SomeType>
inline bool Option<SomeType>::Builder::isNone() {
  return which() == Option<SomeType>::NONE;
}
template <typename SomeType>
inline  ::capnp::Void Option<SomeType>::Reader::getNone() const {
  KJ_IREQUIRE(which() == Option<SomeType>::NONE,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

template <typename SomeType>
inline  ::capnp::Void Option<SomeType>::Builder::getNone() {
  KJ_IREQUIRE(which() == Option<SomeType>::NONE,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
template <typename SomeType>
inline void Option<SomeType>::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Option<SomeType>::Which>(
      0 * ::capnp::ELEMENTS, Option<SomeType>::NONE);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

template <typename SomeType>
inline bool Option<SomeType>::Reader::isSome() const {
  return which() == Option<SomeType>::SOME;
}
template <typename SomeType>
inline bool Option<SomeType>::Builder::isSome() {
  return which() == Option<SomeType>::SOME;
}
template <typename SomeType>
inline bool Option<SomeType>::Reader::hasSome() const {
  if (which() != Option<SomeType>::SOME) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename SomeType>
inline bool Option<SomeType>::Builder::hasSome() {
  if (which() != Option<SomeType>::SOME) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename SomeType>
inline  ::capnp::ReaderFor<SomeType> Option<SomeType>::Reader::getSome() const {
  KJ_IREQUIRE(which() == Option<SomeType>::SOME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<SomeType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename SomeType>
inline  ::capnp::BuilderFor<SomeType> Option<SomeType>::Builder::getSome() {
  KJ_IREQUIRE(which() == Option<SomeType>::SOME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<SomeType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename SomeType>
inline void Option<SomeType>::Builder::setSome( ::capnp::ReaderFor<SomeType> value) {
  _builder.setDataField<Option<SomeType>::Which>(
      0 * ::capnp::ELEMENTS, Option<SomeType>::SOME);
  ::capnp::_::PointerHelpers<SomeType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename SomeType>
inline  ::capnp::BuilderFor<SomeType> Option<SomeType>::Builder::initSome() {
  _builder.setDataField<Option<SomeType>::Which>(
      0 * ::capnp::ELEMENTS, Option<SomeType>::SOME);
  return ::capnp::_::PointerHelpers<SomeType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename SomeType>
inline  ::capnp::BuilderFor<SomeType> Option<SomeType>::Builder::initSome(unsigned int size) {
  _builder.setDataField<Option<SomeType>::Which>(
      0 * ::capnp::ELEMENTS, Option<SomeType>::SOME);
  return ::capnp::_::PointerHelpers<SomeType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename SomeType>
inline void Option<SomeType>::Builder::adoptSome(
    ::capnp::Orphan<SomeType>&& value) {
  _builder.setDataField<Option<SomeType>::Which>(
      0 * ::capnp::ELEMENTS, Option<SomeType>::SOME);
  ::capnp::_::PointerHelpers<SomeType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename SomeType>
inline ::capnp::Orphan<SomeType> Option<SomeType>::Builder::disownSome() {
  KJ_IREQUIRE(which() == Option<SomeType>::SOME,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<SomeType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

// Option<SomeType>
#ifndef _MSC_VER
template <typename SomeType>
constexpr uint16_t Option<SomeType>::_capnpPrivate::dataWordSize;
template <typename SomeType>
constexpr uint16_t Option<SomeType>::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
template <typename SomeType>
constexpr ::capnp::Kind Option<SomeType>::_capnpPrivate::kind;
template <typename SomeType>
constexpr ::capnp::_::RawSchema const* Option<SomeType>::_capnpPrivate::schema;
template <typename SomeType>
constexpr ::capnp::_::RawBrandedSchema const* Option<SomeType>::_capnpPrivate::brand;
template <typename SomeType>
const ::capnp::_::RawBrandedSchema::Scope Option<SomeType>::_capnpPrivate::brandScopes[] = {
  { 0xb17d86024218444d, brandBindings + 0, 1, false},
};
template <typename SomeType>
const ::capnp::_::RawBrandedSchema::Binding Option<SomeType>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<SomeType>(),
};
template <typename SomeType>
const ::capnp::_::RawBrandedSchema Option<SomeType>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b17d86024218444d, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename FirstType, typename SecondType>
inline bool Pair<FirstType, SecondType>::Reader::hasFirst() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename FirstType, typename SecondType>
inline bool Pair<FirstType, SecondType>::Builder::hasFirst() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
template <typename FirstType, typename SecondType>
inline  ::capnp::ReaderFor<FirstType> Pair<FirstType, SecondType>::Reader::getFirst() const {
  return ::capnp::_::PointerHelpers<FirstType>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
template <typename FirstType, typename SecondType>
inline  ::capnp::BuilderFor<FirstType> Pair<FirstType, SecondType>::Builder::getFirst() {
  return ::capnp::_::PointerHelpers<FirstType>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename FirstType, typename SecondType>
inline  ::capnp::PipelineFor<FirstType> Pair<FirstType, SecondType>::Pipeline::getFirst() {
  return  ::capnp::PipelineFor<FirstType>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename FirstType, typename SecondType>
inline void Pair<FirstType, SecondType>::Builder::setFirst( ::capnp::ReaderFor<FirstType> value) {
  ::capnp::_::PointerHelpers<FirstType>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
template <typename FirstType, typename SecondType>
inline  ::capnp::BuilderFor<FirstType> Pair<FirstType, SecondType>::Builder::initFirst() {
  return ::capnp::_::PointerHelpers<FirstType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
template <typename FirstType, typename SecondType>
inline  ::capnp::BuilderFor<FirstType> Pair<FirstType, SecondType>::Builder::initFirst(unsigned int size) {
  return ::capnp::_::PointerHelpers<FirstType>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
template <typename FirstType, typename SecondType>
inline void Pair<FirstType, SecondType>::Builder::adoptFirst(
    ::capnp::Orphan<FirstType>&& value) {
  ::capnp::_::PointerHelpers<FirstType>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
template <typename FirstType, typename SecondType>
inline ::capnp::Orphan<FirstType> Pair<FirstType, SecondType>::Builder::disownFirst() {
  return ::capnp::_::PointerHelpers<FirstType>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

template <typename FirstType, typename SecondType>
inline bool Pair<FirstType, SecondType>::Reader::hasSecond() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename FirstType, typename SecondType>
inline bool Pair<FirstType, SecondType>::Builder::hasSecond() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
template <typename FirstType, typename SecondType>
inline  ::capnp::ReaderFor<SecondType> Pair<FirstType, SecondType>::Reader::getSecond() const {
  return ::capnp::_::PointerHelpers<SecondType>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
template <typename FirstType, typename SecondType>
inline  ::capnp::BuilderFor<SecondType> Pair<FirstType, SecondType>::Builder::getSecond() {
  return ::capnp::_::PointerHelpers<SecondType>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename FirstType, typename SecondType>
inline  ::capnp::PipelineFor<SecondType> Pair<FirstType, SecondType>::Pipeline::getSecond() {
  return  ::capnp::PipelineFor<SecondType>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename FirstType, typename SecondType>
inline void Pair<FirstType, SecondType>::Builder::setSecond( ::capnp::ReaderFor<SecondType> value) {
  ::capnp::_::PointerHelpers<SecondType>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
template <typename FirstType, typename SecondType>
inline  ::capnp::BuilderFor<SecondType> Pair<FirstType, SecondType>::Builder::initSecond() {
  return ::capnp::_::PointerHelpers<SecondType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
template <typename FirstType, typename SecondType>
inline  ::capnp::BuilderFor<SecondType> Pair<FirstType, SecondType>::Builder::initSecond(unsigned int size) {
  return ::capnp::_::PointerHelpers<SecondType>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
template <typename FirstType, typename SecondType>
inline void Pair<FirstType, SecondType>::Builder::adoptSecond(
    ::capnp::Orphan<SecondType>&& value) {
  ::capnp::_::PointerHelpers<SecondType>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
template <typename FirstType, typename SecondType>
inline ::capnp::Orphan<SecondType> Pair<FirstType, SecondType>::Builder::disownSecond() {
  return ::capnp::_::PointerHelpers<SecondType>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

// Pair<FirstType, SecondType>
#ifndef _MSC_VER
template <typename FirstType, typename SecondType>
constexpr uint16_t Pair<FirstType, SecondType>::_capnpPrivate::dataWordSize;
template <typename FirstType, typename SecondType>
constexpr uint16_t Pair<FirstType, SecondType>::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
template <typename FirstType, typename SecondType>
constexpr ::capnp::Kind Pair<FirstType, SecondType>::_capnpPrivate::kind;
template <typename FirstType, typename SecondType>
constexpr ::capnp::_::RawSchema const* Pair<FirstType, SecondType>::_capnpPrivate::schema;
template <typename FirstType, typename SecondType>
constexpr ::capnp::_::RawBrandedSchema const* Pair<FirstType, SecondType>::_capnpPrivate::brand;
template <typename FirstType, typename SecondType>
const ::capnp::_::RawBrandedSchema::Scope Pair<FirstType, SecondType>::_capnpPrivate::brandScopes[] = {
  { 0xa18e1acd5ce2427c, brandBindings + 0, 2, false},
};
template <typename FirstType, typename SecondType>
const ::capnp::_::RawBrandedSchema::Binding Pair<FirstType, SecondType>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<FirstType>(),
  ::capnp::_::brandBindingFor<SecondType>(),
};
template <typename FirstType, typename SecondType>
const ::capnp::_::RawBrandedSchema Pair<FirstType, SecondType>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_a18e1acd5ce2427c, brandScopes, nullptr,
  sizeof(brandScopes) / sizeof(brandScopes[0]), 0, nullptr
};
#endif  // !CAPNP_LITE


#endif  // CAPNP_INCLUDED_a32f1c68bcd121ee_
