// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: protocols\mesh.capnp

#ifndef CAPNP_INCLUDED_f063134c28cffff2_
#define CAPNP_INCLUDED_f063134c28cffff2_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <math.capnp.h>
#include <utils.capnp.h>

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fbeac91137839967);
CAPNP_DECLARE_SCHEMA(a0b3f1b2653c62aa);
CAPNP_DECLARE_SCHEMA(8876750e6bdf2879);
CAPNP_DECLARE_SCHEMA(afe88be97f056652);
CAPNP_DECLARE_SCHEMA(9c4ab6880b9462a0);
CAPNP_DECLARE_SCHEMA(822f647ac3885738);

}  // namespace schemas
}  // namespace capnp


struct TexCoord {
  TexCoord() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fbeac91137839967, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Vertex {
  Vertex() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0b3f1b2653c62aa, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Vertices {
  Vertices() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8876750e6bdf2879, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct VerticesRaw {
  VerticesRaw() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(afe88be97f056652, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh {
  Mesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Vertices;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c4ab6880b9462a0, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh::Vertices {
  Vertices() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INTERLEAVED,
    DISCRETE,
    INTERLEAVED_RAW,
    DISCRETE_RAW,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(822f647ac3885738, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TexCoord::Reader {
public:
  typedef TexCoord Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getU() const;

  inline float getV() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TexCoord::Builder {
public:
  typedef TexCoord Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getU();
  inline void setU(float value);

  inline float getV();
  inline void setV(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TexCoord::Pipeline {
public:
  typedef TexCoord Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Vertex::Reader {
public:
  typedef Vertex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::Point3::Reader getPosition() const;

  inline bool hasNormal() const;
  inline  ::Vector3::Reader getNormal() const;

  inline bool hasUv() const;
  inline  ::TexCoord::Reader getUv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vertex::Builder {
public:
  typedef Vertex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::Point3::Builder getPosition();
  inline void setPosition( ::Point3::Reader value);
  inline  ::Point3::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::Point3>&& value);
  inline ::capnp::Orphan< ::Point3> disownPosition();

  inline bool hasNormal();
  inline  ::Vector3::Builder getNormal();
  inline void setNormal( ::Vector3::Reader value);
  inline  ::Vector3::Builder initNormal();
  inline void adoptNormal(::capnp::Orphan< ::Vector3>&& value);
  inline ::capnp::Orphan< ::Vector3> disownNormal();

  inline bool hasUv();
  inline  ::TexCoord::Builder getUv();
  inline void setUv( ::TexCoord::Reader value);
  inline  ::TexCoord::Builder initUv();
  inline void adoptUv(::capnp::Orphan< ::TexCoord>&& value);
  inline ::capnp::Orphan< ::TexCoord> disownUv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vertex::Pipeline {
public:
  typedef Vertex Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Point3::Pipeline getPosition();
  inline  ::Vector3::Pipeline getNormal();
  inline  ::TexCoord::Pipeline getUv();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Vertices::Reader {
public:
  typedef Vertices Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPositions() const;
  inline  ::capnp::List< ::Point3>::Reader getPositions() const;

  inline bool hasNormals() const;
  inline  ::Option< ::capnp::List< ::Vector3>>::Reader getNormals() const;

  inline bool hasUvs() const;
  inline  ::Option< ::capnp::List< ::TexCoord>>::Reader getUvs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Vertices::Builder {
public:
  typedef Vertices Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPositions();
  inline  ::capnp::List< ::Point3>::Builder getPositions();
  inline void setPositions( ::capnp::List< ::Point3>::Reader value);
  inline  ::capnp::List< ::Point3>::Builder initPositions(unsigned int size);
  inline void adoptPositions(::capnp::Orphan< ::capnp::List< ::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Point3>> disownPositions();

  inline bool hasNormals();
  inline  ::Option< ::capnp::List< ::Vector3>>::Builder getNormals();
  inline void setNormals( ::Option< ::capnp::List< ::Vector3>>::Reader value);
  inline  ::Option< ::capnp::List< ::Vector3>>::Builder initNormals();
  inline void adoptNormals(::capnp::Orphan< ::Option< ::capnp::List< ::Vector3>>>&& value);
  inline ::capnp::Orphan< ::Option< ::capnp::List< ::Vector3>>> disownNormals();

  inline bool hasUvs();
  inline  ::Option< ::capnp::List< ::TexCoord>>::Builder getUvs();
  inline void setUvs( ::Option< ::capnp::List< ::TexCoord>>::Reader value);
  inline  ::Option< ::capnp::List< ::TexCoord>>::Builder initUvs();
  inline void adoptUvs(::capnp::Orphan< ::Option< ::capnp::List< ::TexCoord>>>&& value);
  inline ::capnp::Orphan< ::Option< ::capnp::List< ::TexCoord>>> disownUvs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Vertices::Pipeline {
public:
  typedef Vertices Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Option< ::capnp::List< ::Vector3>>::Pipeline getNormals();
  inline  ::Option< ::capnp::List< ::TexCoord>>::Pipeline getUvs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VerticesRaw::Reader {
public:
  typedef VerticesRaw Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPositions() const;
  inline  ::capnp::Data::Reader getPositions() const;

  inline bool hasNormals() const;
  inline  ::Option< ::capnp::Data>::Reader getNormals() const;

  inline bool hasUvs() const;
  inline  ::Option< ::capnp::Data>::Reader getUvs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VerticesRaw::Builder {
public:
  typedef VerticesRaw Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPositions();
  inline  ::capnp::Data::Builder getPositions();
  inline void setPositions( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPositions(unsigned int size);
  inline void adoptPositions(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPositions();

  inline bool hasNormals();
  inline  ::Option< ::capnp::Data>::Builder getNormals();
  inline void setNormals( ::Option< ::capnp::Data>::Reader value);
  inline  ::Option< ::capnp::Data>::Builder initNormals();
  inline void adoptNormals(::capnp::Orphan< ::Option< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::Option< ::capnp::Data>> disownNormals();

  inline bool hasUvs();
  inline  ::Option< ::capnp::Data>::Builder getUvs();
  inline void setUvs( ::Option< ::capnp::Data>::Reader value);
  inline  ::Option< ::capnp::Data>::Builder initUvs();
  inline void adoptUvs(::capnp::Orphan< ::Option< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::Option< ::capnp::Data>> disownUvs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VerticesRaw::Pipeline {
public:
  typedef VerticesRaw Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Option< ::capnp::Data>::Pipeline getNormals();
  inline  ::Option< ::capnp::Data>::Pipeline getUvs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Reader {
public:
  typedef Mesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMaterials() const;
  inline  ::capnp::List< ::uint32_t>::Reader getMaterials() const;

  inline Vertices::Reader getVertices() const;

  inline bool hasIndices() const;
  inline  ::Option< ::capnp::List< ::uint32_t>>::Reader getIndices() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Builder {
public:
  typedef Mesh Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMaterials();
  inline  ::capnp::List< ::uint32_t>::Builder getMaterials();
  inline void setMaterials( ::capnp::List< ::uint32_t>::Reader value);
  inline void setMaterials(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initMaterials(unsigned int size);
  inline void adoptMaterials(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownMaterials();

  inline Vertices::Builder getVertices();
  inline Vertices::Builder initVertices();

  inline bool hasIndices();
  inline  ::Option< ::capnp::List< ::uint32_t>>::Builder getIndices();
  inline void setIndices( ::Option< ::capnp::List< ::uint32_t>>::Reader value);
  inline  ::Option< ::capnp::List< ::uint32_t>>::Builder initIndices();
  inline void adoptIndices(::capnp::Orphan< ::Option< ::capnp::List< ::uint32_t>>>&& value);
  inline ::capnp::Orphan< ::Option< ::capnp::List< ::uint32_t>>> disownIndices();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Pipeline {
public:
  typedef Mesh Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Vertices::Pipeline getVertices();
  inline  ::Option< ::capnp::List< ::uint32_t>>::Pipeline getIndices();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Vertices::Reader {
public:
  typedef Vertices Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInterleaved() const;
  inline bool hasInterleaved() const;
  inline  ::capnp::List< ::Vertex>::Reader getInterleaved() const;

  inline bool isDiscrete() const;
  inline bool hasDiscrete() const;
  inline  ::Vertices::Reader getDiscrete() const;

  inline bool isInterleavedRaw() const;
  inline bool hasInterleavedRaw() const;
  inline  ::capnp::Data::Reader getInterleavedRaw() const;

  inline bool isDiscreteRaw() const;
  inline bool hasDiscreteRaw() const;
  inline  ::VerticesRaw::Reader getDiscreteRaw() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Vertices::Builder {
public:
  typedef Vertices Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInterleaved();
  inline bool hasInterleaved();
  inline  ::capnp::List< ::Vertex>::Builder getInterleaved();
  inline void setInterleaved( ::capnp::List< ::Vertex>::Reader value);
  inline  ::capnp::List< ::Vertex>::Builder initInterleaved(unsigned int size);
  inline void adoptInterleaved(::capnp::Orphan< ::capnp::List< ::Vertex>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Vertex>> disownInterleaved();

  inline bool isDiscrete();
  inline bool hasDiscrete();
  inline  ::Vertices::Builder getDiscrete();
  inline void setDiscrete( ::Vertices::Reader value);
  inline  ::Vertices::Builder initDiscrete();
  inline void adoptDiscrete(::capnp::Orphan< ::Vertices>&& value);
  inline ::capnp::Orphan< ::Vertices> disownDiscrete();

  inline bool isInterleavedRaw();
  inline bool hasInterleavedRaw();
  inline  ::capnp::Data::Builder getInterleavedRaw();
  inline void setInterleavedRaw( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initInterleavedRaw(unsigned int size);
  inline void adoptInterleavedRaw(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownInterleavedRaw();

  inline bool isDiscreteRaw();
  inline bool hasDiscreteRaw();
  inline  ::VerticesRaw::Builder getDiscreteRaw();
  inline void setDiscreteRaw( ::VerticesRaw::Reader value);
  inline  ::VerticesRaw::Builder initDiscreteRaw();
  inline void adoptDiscreteRaw(::capnp::Orphan< ::VerticesRaw>&& value);
  inline ::capnp::Orphan< ::VerticesRaw> disownDiscreteRaw();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Vertices::Pipeline {
public:
  typedef Vertices Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float TexCoord::Reader::getU() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float TexCoord::Builder::getU() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void TexCoord::Builder::setU(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float TexCoord::Reader::getV() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float TexCoord::Builder::getV() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void TexCoord::Builder::setV(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Vertex::Reader::hasPosition() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Vertex::Builder::hasPosition() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Point3::Reader Vertex::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::Point3>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Point3::Builder Vertex::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::Point3>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Point3::Pipeline Vertex::Pipeline::getPosition() {
  return  ::Point3::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Vertex::Builder::setPosition( ::Point3::Reader value) {
  ::capnp::_::PointerHelpers< ::Point3>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Point3::Builder Vertex::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::Point3>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Vertex::Builder::adoptPosition(
    ::capnp::Orphan< ::Point3>&& value) {
  ::capnp::_::PointerHelpers< ::Point3>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Point3> Vertex::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::Point3>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Vertex::Reader::hasNormal() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Vertex::Builder::hasNormal() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Vector3::Reader Vertex::Reader::getNormal() const {
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Vector3::Builder Vertex::Builder::getNormal() {
  return ::capnp::_::PointerHelpers< ::Vector3>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Vector3::Pipeline Vertex::Pipeline::getNormal() {
  return  ::Vector3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Vertex::Builder::setNormal( ::Vector3::Reader value) {
  ::capnp::_::PointerHelpers< ::Vector3>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Vector3::Builder Vertex::Builder::initNormal() {
  return ::capnp::_::PointerHelpers< ::Vector3>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Vertex::Builder::adoptNormal(
    ::capnp::Orphan< ::Vector3>&& value) {
  ::capnp::_::PointerHelpers< ::Vector3>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vector3> Vertex::Builder::disownNormal() {
  return ::capnp::_::PointerHelpers< ::Vector3>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Vertex::Reader::hasUv() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Vertex::Builder::hasUv() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::TexCoord::Reader Vertex::Reader::getUv() const {
  return ::capnp::_::PointerHelpers< ::TexCoord>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::TexCoord::Builder Vertex::Builder::getUv() {
  return ::capnp::_::PointerHelpers< ::TexCoord>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::TexCoord::Pipeline Vertex::Pipeline::getUv() {
  return  ::TexCoord::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Vertex::Builder::setUv( ::TexCoord::Reader value) {
  ::capnp::_::PointerHelpers< ::TexCoord>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::TexCoord::Builder Vertex::Builder::initUv() {
  return ::capnp::_::PointerHelpers< ::TexCoord>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Vertex::Builder::adoptUv(
    ::capnp::Orphan< ::TexCoord>&& value) {
  ::capnp::_::PointerHelpers< ::TexCoord>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::TexCoord> Vertex::Builder::disownUv() {
  return ::capnp::_::PointerHelpers< ::TexCoord>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Vertices::Reader::hasPositions() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Vertices::Builder::hasPositions() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Point3>::Reader Vertices::Reader::getPositions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Point3>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Point3>::Builder Vertices::Builder::getPositions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Point3>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Vertices::Builder::setPositions( ::capnp::List< ::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Point3>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Point3>::Builder Vertices::Builder::initPositions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Point3>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Vertices::Builder::adoptPositions(
    ::capnp::Orphan< ::capnp::List< ::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Point3>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Point3>> Vertices::Builder::disownPositions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Point3>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Vertices::Reader::hasNormals() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Vertices::Builder::hasNormals() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Option< ::capnp::List< ::Vector3>>::Reader Vertices::Reader::getNormals() const {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::Vector3>>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Option< ::capnp::List< ::Vector3>>::Builder Vertices::Builder::getNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::Vector3>>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Option< ::capnp::List< ::Vector3>>::Pipeline Vertices::Pipeline::getNormals() {
  return  ::Option< ::capnp::List< ::Vector3>>::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Vertices::Builder::setNormals( ::Option< ::capnp::List< ::Vector3>>::Reader value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::Vector3>>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Option< ::capnp::List< ::Vector3>>::Builder Vertices::Builder::initNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::Vector3>>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Vertices::Builder::adoptNormals(
    ::capnp::Orphan< ::Option< ::capnp::List< ::Vector3>>>&& value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::Vector3>>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Option< ::capnp::List< ::Vector3>>> Vertices::Builder::disownNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::Vector3>>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Vertices::Reader::hasUvs() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Vertices::Builder::hasUvs() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::Option< ::capnp::List< ::TexCoord>>::Reader Vertices::Reader::getUvs() const {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::TexCoord>>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::Option< ::capnp::List< ::TexCoord>>::Builder Vertices::Builder::getUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::TexCoord>>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Option< ::capnp::List< ::TexCoord>>::Pipeline Vertices::Pipeline::getUvs() {
  return  ::Option< ::capnp::List< ::TexCoord>>::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Vertices::Builder::setUvs( ::Option< ::capnp::List< ::TexCoord>>::Reader value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::TexCoord>>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::Option< ::capnp::List< ::TexCoord>>::Builder Vertices::Builder::initUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::TexCoord>>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Vertices::Builder::adoptUvs(
    ::capnp::Orphan< ::Option< ::capnp::List< ::TexCoord>>>&& value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::TexCoord>>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Option< ::capnp::List< ::TexCoord>>> Vertices::Builder::disownUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::TexCoord>>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool VerticesRaw::Reader::hasPositions() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool VerticesRaw::Builder::hasPositions() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader VerticesRaw::Reader::getPositions() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder VerticesRaw::Builder::getPositions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void VerticesRaw::Builder::setPositions( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder VerticesRaw::Builder::initPositions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void VerticesRaw::Builder::adoptPositions(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> VerticesRaw::Builder::disownPositions() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool VerticesRaw::Reader::hasNormals() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool VerticesRaw::Builder::hasNormals() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Option< ::capnp::Data>::Reader VerticesRaw::Reader::getNormals() const {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Option< ::capnp::Data>::Builder VerticesRaw::Builder::getNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Option< ::capnp::Data>::Pipeline VerticesRaw::Pipeline::getNormals() {
  return  ::Option< ::capnp::Data>::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void VerticesRaw::Builder::setNormals( ::Option< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Option< ::capnp::Data>::Builder VerticesRaw::Builder::initNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void VerticesRaw::Builder::adoptNormals(
    ::capnp::Orphan< ::Option< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Option< ::capnp::Data>> VerticesRaw::Builder::disownNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool VerticesRaw::Reader::hasUvs() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool VerticesRaw::Builder::hasUvs() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::Option< ::capnp::Data>::Reader VerticesRaw::Reader::getUvs() const {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::Option< ::capnp::Data>::Builder VerticesRaw::Builder::getUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Option< ::capnp::Data>::Pipeline VerticesRaw::Pipeline::getUvs() {
  return  ::Option< ::capnp::Data>::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void VerticesRaw::Builder::setUvs( ::Option< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::Option< ::capnp::Data>::Builder VerticesRaw::Builder::initUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void VerticesRaw::Builder::adoptUvs(
    ::capnp::Orphan< ::Option< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Option< ::capnp::Data>> VerticesRaw::Builder::disownUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasMaterials() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasMaterials() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader Mesh::Reader::getMaterials() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder Mesh::Builder::getMaterials() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setMaterials( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setMaterials(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder Mesh::Builder::initMaterials(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptMaterials(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> Mesh::Builder::disownMaterials() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline Mesh::Vertices::Reader Mesh::Reader::getVertices() const {
  return Mesh::Vertices::Reader(_reader);
}
inline Mesh::Vertices::Builder Mesh::Builder::getVertices() {
  return Mesh::Vertices::Builder(_builder);
}
#if !CAPNP_LITE
inline Mesh::Vertices::Pipeline Mesh::Pipeline::getVertices() {
  return Mesh::Vertices::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Mesh::Vertices::Builder Mesh::Builder::initVertices() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return Mesh::Vertices::Builder(_builder);
}
inline bool Mesh::Reader::hasIndices() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasIndices() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::Option< ::capnp::List< ::uint32_t>>::Reader Mesh::Reader::getIndices() const {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::uint32_t>>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::Option< ::capnp::List< ::uint32_t>>::Builder Mesh::Builder::getIndices() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::uint32_t>>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Option< ::capnp::List< ::uint32_t>>::Pipeline Mesh::Pipeline::getIndices() {
  return  ::Option< ::capnp::List< ::uint32_t>>::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Mesh::Builder::setIndices( ::Option< ::capnp::List< ::uint32_t>>::Reader value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::uint32_t>>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::Option< ::capnp::List< ::uint32_t>>::Builder Mesh::Builder::initIndices() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::uint32_t>>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Mesh::Builder::adoptIndices(
    ::capnp::Orphan< ::Option< ::capnp::List< ::uint32_t>>>&& value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::uint32_t>>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Option< ::capnp::List< ::uint32_t>>> Mesh::Builder::disownIndices() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::List< ::uint32_t>>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::Mesh::Vertices::Which Mesh::Vertices::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::Mesh::Vertices::Which Mesh::Vertices::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Mesh::Vertices::Reader::isInterleaved() const {
  return which() == Mesh::Vertices::INTERLEAVED;
}
inline bool Mesh::Vertices::Builder::isInterleaved() {
  return which() == Mesh::Vertices::INTERLEAVED;
}
inline bool Mesh::Vertices::Reader::hasInterleaved() const {
  if (which() != Mesh::Vertices::INTERLEAVED) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Vertices::Builder::hasInterleaved() {
  if (which() != Mesh::Vertices::INTERLEAVED) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Vertex>::Reader Mesh::Vertices::Reader::getInterleaved() const {
  KJ_IREQUIRE(which() == Mesh::Vertices::INTERLEAVED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Vertex>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Vertex>::Builder Mesh::Vertices::Builder::getInterleaved() {
  KJ_IREQUIRE(which() == Mesh::Vertices::INTERLEAVED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Vertex>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Vertices::Builder::setInterleaved( ::capnp::List< ::Vertex>::Reader value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::INTERLEAVED);
  ::capnp::_::PointerHelpers< ::capnp::List< ::Vertex>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Vertex>::Builder Mesh::Vertices::Builder::initInterleaved(unsigned int size) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::INTERLEAVED);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Vertex>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mesh::Vertices::Builder::adoptInterleaved(
    ::capnp::Orphan< ::capnp::List< ::Vertex>>&& value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::INTERLEAVED);
  ::capnp::_::PointerHelpers< ::capnp::List< ::Vertex>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Vertex>> Mesh::Vertices::Builder::disownInterleaved() {
  KJ_IREQUIRE(which() == Mesh::Vertices::INTERLEAVED,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Vertex>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Vertices::Reader::isDiscrete() const {
  return which() == Mesh::Vertices::DISCRETE;
}
inline bool Mesh::Vertices::Builder::isDiscrete() {
  return which() == Mesh::Vertices::DISCRETE;
}
inline bool Mesh::Vertices::Reader::hasDiscrete() const {
  if (which() != Mesh::Vertices::DISCRETE) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Vertices::Builder::hasDiscrete() {
  if (which() != Mesh::Vertices::DISCRETE) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Vertices::Reader Mesh::Vertices::Reader::getDiscrete() const {
  KJ_IREQUIRE(which() == Mesh::Vertices::DISCRETE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vertices>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Vertices::Builder Mesh::Vertices::Builder::getDiscrete() {
  KJ_IREQUIRE(which() == Mesh::Vertices::DISCRETE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vertices>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Vertices::Builder::setDiscrete( ::Vertices::Reader value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::DISCRETE);
  ::capnp::_::PointerHelpers< ::Vertices>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Vertices::Builder Mesh::Vertices::Builder::initDiscrete() {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::DISCRETE);
  return ::capnp::_::PointerHelpers< ::Vertices>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Vertices::Builder::adoptDiscrete(
    ::capnp::Orphan< ::Vertices>&& value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::DISCRETE);
  ::capnp::_::PointerHelpers< ::Vertices>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Vertices> Mesh::Vertices::Builder::disownDiscrete() {
  KJ_IREQUIRE(which() == Mesh::Vertices::DISCRETE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Vertices>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Vertices::Reader::isInterleavedRaw() const {
  return which() == Mesh::Vertices::INTERLEAVED_RAW;
}
inline bool Mesh::Vertices::Builder::isInterleavedRaw() {
  return which() == Mesh::Vertices::INTERLEAVED_RAW;
}
inline bool Mesh::Vertices::Reader::hasInterleavedRaw() const {
  if (which() != Mesh::Vertices::INTERLEAVED_RAW) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Vertices::Builder::hasInterleavedRaw() {
  if (which() != Mesh::Vertices::INTERLEAVED_RAW) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Mesh::Vertices::Reader::getInterleavedRaw() const {
  KJ_IREQUIRE(which() == Mesh::Vertices::INTERLEAVED_RAW,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Mesh::Vertices::Builder::getInterleavedRaw() {
  KJ_IREQUIRE(which() == Mesh::Vertices::INTERLEAVED_RAW,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Vertices::Builder::setInterleavedRaw( ::capnp::Data::Reader value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::INTERLEAVED_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Mesh::Vertices::Builder::initInterleavedRaw(unsigned int size) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::INTERLEAVED_RAW);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mesh::Vertices::Builder::adoptInterleavedRaw(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::INTERLEAVED_RAW);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Mesh::Vertices::Builder::disownInterleavedRaw() {
  KJ_IREQUIRE(which() == Mesh::Vertices::INTERLEAVED_RAW,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Vertices::Reader::isDiscreteRaw() const {
  return which() == Mesh::Vertices::DISCRETE_RAW;
}
inline bool Mesh::Vertices::Builder::isDiscreteRaw() {
  return which() == Mesh::Vertices::DISCRETE_RAW;
}
inline bool Mesh::Vertices::Reader::hasDiscreteRaw() const {
  if (which() != Mesh::Vertices::DISCRETE_RAW) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Vertices::Builder::hasDiscreteRaw() {
  if (which() != Mesh::Vertices::DISCRETE_RAW) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::VerticesRaw::Reader Mesh::Vertices::Reader::getDiscreteRaw() const {
  KJ_IREQUIRE(which() == Mesh::Vertices::DISCRETE_RAW,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::VerticesRaw>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::VerticesRaw::Builder Mesh::Vertices::Builder::getDiscreteRaw() {
  KJ_IREQUIRE(which() == Mesh::Vertices::DISCRETE_RAW,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::VerticesRaw>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Vertices::Builder::setDiscreteRaw( ::VerticesRaw::Reader value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::DISCRETE_RAW);
  ::capnp::_::PointerHelpers< ::VerticesRaw>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::VerticesRaw::Builder Mesh::Vertices::Builder::initDiscreteRaw() {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::DISCRETE_RAW);
  return ::capnp::_::PointerHelpers< ::VerticesRaw>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Vertices::Builder::adoptDiscreteRaw(
    ::capnp::Orphan< ::VerticesRaw>&& value) {
  _builder.setDataField<Mesh::Vertices::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Vertices::DISCRETE_RAW);
  ::capnp::_::PointerHelpers< ::VerticesRaw>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::VerticesRaw> Mesh::Vertices::Builder::disownDiscreteRaw() {
  KJ_IREQUIRE(which() == Mesh::Vertices::DISCRETE_RAW,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::VerticesRaw>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_f063134c28cffff2_
