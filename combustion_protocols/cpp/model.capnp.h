// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: protocols\model.capnp

#ifndef CAPNP_INCLUDED_80f216b08d0ebb65_
#define CAPNP_INCLUDED_80f216b08d0ebb65_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <math.capnp.h>
#include <utils.capnp.h>

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a691a6e78ccbfb5a);
CAPNP_DECLARE_SCHEMA(ec677cdf82468e9b);
CAPNP_DECLARE_SCHEMA(adcbd208883c0563);

}  // namespace schemas
}  // namespace capnp


struct Model {
  Model() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a691a6e78ccbfb5a, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Node {
  Node() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec677cdf82468e9b, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh {
  Mesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adcbd208883c0563, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Model::Reader {
public:
  typedef Model Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasRoot() const;
  inline  ::Node::Reader getRoot() const;

  inline bool hasMeshes() const;
  inline  ::capnp::List< ::Mesh>::Reader getMeshes() const;

  inline bool hasMaterials() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getMaterials() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Model::Builder {
public:
  typedef Model Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRoot();
  inline  ::Node::Builder getRoot();
  inline void setRoot( ::Node::Reader value);
  inline  ::Node::Builder initRoot();
  inline void adoptRoot(::capnp::Orphan< ::Node>&& value);
  inline ::capnp::Orphan< ::Node> disownRoot();

  inline bool hasMeshes();
  inline  ::capnp::List< ::Mesh>::Builder getMeshes();
  inline void setMeshes( ::capnp::List< ::Mesh>::Reader value);
  inline  ::capnp::List< ::Mesh>::Builder initMeshes(unsigned int size);
  inline void adoptMeshes(::capnp::Orphan< ::capnp::List< ::Mesh>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Mesh>> disownMeshes();

  inline bool hasMaterials();
  inline  ::capnp::List< ::capnp::Text>::Builder getMaterials();
  inline void setMaterials( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setMaterials(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initMaterials(unsigned int size);
  inline void adoptMaterials(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownMaterials();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Model::Pipeline {
public:
  typedef Model Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Node::Pipeline getRoot();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Node::Reader {
public:
  typedef Node Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasMeshes() const;
  inline  ::capnp::List< ::uint32_t>::Reader getMeshes() const;

  inline bool hasChildren() const;
  inline  ::capnp::List< ::Node>::Reader getChildren() const;

  inline bool hasTransforms() const;
  inline  ::capnp::List< ::Transform>::Reader getTransforms() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Node::Builder {
public:
  typedef Node Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasMeshes();
  inline  ::capnp::List< ::uint32_t>::Builder getMeshes();
  inline void setMeshes( ::capnp::List< ::uint32_t>::Reader value);
  inline void setMeshes(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initMeshes(unsigned int size);
  inline void adoptMeshes(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownMeshes();

  inline bool hasChildren();
  inline  ::capnp::List< ::Node>::Builder getChildren();
  inline void setChildren( ::capnp::List< ::Node>::Reader value);
  inline  ::capnp::List< ::Node>::Builder initChildren(unsigned int size);
  inline void adoptChildren(::capnp::Orphan< ::capnp::List< ::Node>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Node>> disownChildren();

  inline bool hasTransforms();
  inline  ::capnp::List< ::Transform>::Builder getTransforms();
  inline void setTransforms( ::capnp::List< ::Transform>::Reader value);
  inline  ::capnp::List< ::Transform>::Builder initTransforms(unsigned int size);
  inline void adoptTransforms(::capnp::Orphan< ::capnp::List< ::Transform>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Transform>> disownTransforms();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Node::Pipeline {
public:
  typedef Node Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Reader {
public:
  typedef Mesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMaterials() const;
  inline  ::capnp::List< ::uint32_t>::Reader getMaterials() const;

  inline bool hasIndices() const;
  inline  ::capnp::Data::Reader getIndices() const;

  inline bool hasVertices() const;
  inline  ::capnp::Data::Reader getVertices() const;

  inline bool hasUvs() const;
  inline  ::Option< ::capnp::Data>::Reader getUvs() const;

  inline bool hasNormals() const;
  inline  ::Option< ::capnp::Data>::Reader getNormals() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Builder {
public:
  typedef Mesh Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMaterials();
  inline  ::capnp::List< ::uint32_t>::Builder getMaterials();
  inline void setMaterials( ::capnp::List< ::uint32_t>::Reader value);
  inline void setMaterials(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initMaterials(unsigned int size);
  inline void adoptMaterials(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownMaterials();

  inline bool hasIndices();
  inline  ::capnp::Data::Builder getIndices();
  inline void setIndices( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIndices(unsigned int size);
  inline void adoptIndices(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIndices();

  inline bool hasVertices();
  inline  ::capnp::Data::Builder getVertices();
  inline void setVertices( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initVertices(unsigned int size);
  inline void adoptVertices(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownVertices();

  inline bool hasUvs();
  inline  ::Option< ::capnp::Data>::Builder getUvs();
  inline void setUvs( ::Option< ::capnp::Data>::Reader value);
  inline  ::Option< ::capnp::Data>::Builder initUvs();
  inline void adoptUvs(::capnp::Orphan< ::Option< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::Option< ::capnp::Data>> disownUvs();

  inline bool hasNormals();
  inline  ::Option< ::capnp::Data>::Builder getNormals();
  inline void setNormals( ::Option< ::capnp::Data>::Reader value);
  inline  ::Option< ::capnp::Data>::Builder initNormals();
  inline void adoptNormals(::capnp::Orphan< ::Option< ::capnp::Data>>&& value);
  inline ::capnp::Orphan< ::Option< ::capnp::Data>> disownNormals();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Pipeline {
public:
  typedef Mesh Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Option< ::capnp::Data>::Pipeline getUvs();
  inline  ::Option< ::capnp::Data>::Pipeline getNormals();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool Model::Reader::hasRoot() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Model::Builder::hasRoot() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Node::Reader Model::Reader::getRoot() const {
  return ::capnp::_::PointerHelpers< ::Node>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Node::Builder Model::Builder::getRoot() {
  return ::capnp::_::PointerHelpers< ::Node>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Node::Pipeline Model::Pipeline::getRoot() {
  return  ::Node::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Model::Builder::setRoot( ::Node::Reader value) {
  ::capnp::_::PointerHelpers< ::Node>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Node::Builder Model::Builder::initRoot() {
  return ::capnp::_::PointerHelpers< ::Node>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Model::Builder::adoptRoot(
    ::capnp::Orphan< ::Node>&& value) {
  ::capnp::_::PointerHelpers< ::Node>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Node> Model::Builder::disownRoot() {
  return ::capnp::_::PointerHelpers< ::Node>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Model::Reader::hasMeshes() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Model::Builder::hasMeshes() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Mesh>::Reader Model::Reader::getMeshes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mesh>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Mesh>::Builder Model::Builder::getMeshes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mesh>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Model::Builder::setMeshes( ::capnp::List< ::Mesh>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Mesh>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Mesh>::Builder Model::Builder::initMeshes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mesh>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Model::Builder::adoptMeshes(
    ::capnp::Orphan< ::capnp::List< ::Mesh>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Mesh>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Mesh>> Model::Builder::disownMeshes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Mesh>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Model::Reader::hasMaterials() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Model::Builder::hasMaterials() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader Model::Reader::getMaterials() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder Model::Builder::getMaterials() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Model::Builder::setMaterials( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Model::Builder::setMaterials(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder Model::Builder::initMaterials(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Model::Builder::adoptMaterials(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> Model::Builder::disownMaterials() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Node::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Node::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Node::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Node::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Node::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Node::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Node::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Node::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Node::Reader::hasMeshes() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Node::Builder::hasMeshes() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader Node::Reader::getMeshes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder Node::Builder::getMeshes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Node::Builder::setMeshes( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Node::Builder::setMeshes(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder Node::Builder::initMeshes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Node::Builder::adoptMeshes(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> Node::Builder::disownMeshes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Node::Reader::hasChildren() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Node::Builder::hasChildren() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Node>::Reader Node::Reader::getChildren() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Node>::Builder Node::Builder::getChildren() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Node::Builder::setChildren( ::capnp::List< ::Node>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Node>::Builder Node::Builder::initChildren(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Node::Builder::adoptChildren(
    ::capnp::Orphan< ::capnp::List< ::Node>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Node>> Node::Builder::disownChildren() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Node>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Node::Reader::hasTransforms() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Node::Builder::hasTransforms() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Transform>::Reader Node::Reader::getTransforms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transform>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Transform>::Builder Node::Builder::getTransforms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transform>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Node::Builder::setTransforms( ::capnp::List< ::Transform>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Transform>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Transform>::Builder Node::Builder::initTransforms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transform>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Node::Builder::adoptTransforms(
    ::capnp::Orphan< ::capnp::List< ::Transform>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Transform>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Transform>> Node::Builder::disownTransforms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Transform>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasMaterials() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasMaterials() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader Mesh::Reader::getMaterials() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder Mesh::Builder::getMaterials() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setMaterials( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setMaterials(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder Mesh::Builder::initMaterials(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptMaterials(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> Mesh::Builder::disownMaterials() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasIndices() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasIndices() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Mesh::Reader::getIndices() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Mesh::Builder::getIndices() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setIndices( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Mesh::Builder::initIndices(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptIndices(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Mesh::Builder::disownIndices() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasVertices() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasVertices() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Mesh::Reader::getVertices() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Mesh::Builder::getVertices() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setVertices( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Mesh::Builder::initVertices(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptVertices(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Mesh::Builder::disownVertices() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasUvs() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasUvs() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::Option< ::capnp::Data>::Reader Mesh::Reader::getUvs() const {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::Option< ::capnp::Data>::Builder Mesh::Builder::getUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Option< ::capnp::Data>::Pipeline Mesh::Pipeline::getUvs() {
  return  ::Option< ::capnp::Data>::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Mesh::Builder::setUvs( ::Option< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::Option< ::capnp::Data>::Builder Mesh::Builder::initUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Mesh::Builder::adoptUvs(
    ::capnp::Orphan< ::Option< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Option< ::capnp::Data>> Mesh::Builder::disownUvs() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasNormals() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasNormals() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::Option< ::capnp::Data>::Reader Mesh::Reader::getNormals() const {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::Option< ::capnp::Data>::Builder Mesh::Builder::getNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Option< ::capnp::Data>::Pipeline Mesh::Pipeline::getNormals() {
  return  ::Option< ::capnp::Data>::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Mesh::Builder::setNormals( ::Option< ::capnp::Data>::Reader value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::Option< ::capnp::Data>::Builder Mesh::Builder::initNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Mesh::Builder::adoptNormals(
    ::capnp::Orphan< ::Option< ::capnp::Data>>&& value) {
  ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Option< ::capnp::Data>> Mesh::Builder::disownNormals() {
  return ::capnp::_::PointerHelpers< ::Option< ::capnp::Data>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_80f216b08d0ebb65_
